set nocompatible
" source $HOME/.vim/allfold/allfold_basic.vim

" additional
set dir=$HOME/tmp/vim
set cmdheight=1
set ttyfast
set ruler " show row & col on statusbar
set bs=indent,eol,start
set popt=paper:letter " default is A4 ?!
set laststatus=2
" set cindent

set autoindent
set hlsearch
set incsearch
set showmatch

set ignorecase
set smartcase

set tabstop=3
set softtabstop=3
set shiftwidth=3
set expandtab

set keymodel=startsel

set splitright " new vsplit windows on right
set splitbelow " new split windows on bottom
set nowrapscan " don't search back to the top

" disable beep every time I hit ESC
set noeb vb t_vb=

filetype plugin indent on
syntax on

" conditionally set better encryption
if v:version >= 704
   set cm=blowfish2 " better encryption
elseif v:version >= 703
   set cm=blowfish
endif


" --- turn off highlighting after a match
nmap <silent> <C-\> :silent noh<CR>
imap <silent> <C-\> <C-o>:silent noh<CR>

" make regex 'very magic' -- extended regex, like ruby: a+, not a\+
""nnoremap / /\v
""nnoremap ? ?\v
""vnoremap / /\v
""vnoremap ? ?\v
""cnoremap s/ s/\v

" map ^A and ^E like emacs when home/end don't work due to bad emulation
nnoremap <C-a> 0|
nnoremap <C-e> $
vnoremap <C-e> $
inoremap <C-a> <C-o>^
inoremap <C-e> <C-o>$
" add ^K mapping to to delete to EOL
nnoremap <C-k> d$
vnoremap <C-k> d$
"inoremap <C-k> <Esc>d$ " this works but exits insert mode
"C-O only temporarily exits insert mode
inoremap <C-k> <C-o>D
" command line native movement: Ctrl-B/E - map to Ctrl-A/E
cnoremap <C-a> <C-b>

" I always hit Q when I mean A; remap
nnoremap Q A

" swap characters: dyslexic
nnoremap \ xph

" keys never just -- just use them to insert regardless of mode
nnoremap ) i)<Esc>
"nnoremap ( i(<Esc>
"nnoremap [ i[<Esc>
" prolly mean something else (likely adjacent key)
" never mean F1, just missed <Esc>, if I want help, I'll :help
nnoremap ( *
nnoremap [ p
nnoremap ] i]<Esc>
nnoremap { P
noremap <F1> <Esc>

" folding
vnoremap <F9> zf

" override tabstops for other filetypes
autocmd Filetype   ruby setlocal ts=2 sts=2 sw=2 et
autocmd Filetype   yaml setlocal ts=2 sts=2 sw=2 et
autocmd Filetype    lua setlocal ts=2 sts=2 sw=2 et
autocmd Filetype   perl setlocal ts=2 sts=2 sw=2 et
autocmd Filetype     sh setlocal ts=2 sts=2 sw=2 et
autocmd Filetype   java setlocal ts=4 sts=4 sw=4 et
autocmd Filetype      c setlocal ts=4 sts=4 sw=4 et
autocmd Filetype    cpp setlocal ts=4 sts=4 sw=4 et
autocmd Filetype python setlocal ts=4 sts=4 sw=4 et

" additional matching logic if vim >= 7.4
if version >= 700
   runtime macros/matchit.vim
endif

" the following options are only for gvim
if has('gui_running')
   " disable the toolbar (T) possibly add -=m (menubar)
   set guioptions-=T
   "set guifont="Fixed 10"
   set guifont="Console 10"

   " different colorscheme, which defaults to reverse video
   colorscheme ferraro
   " trap all ctrl-z to avoid loosing the session
   " could just run shell, but running ! will get the point across
   " a better solution would be to run in restricted mode: -Z
   " " e.g. alias gvim='gvim -Z"
   nnoremap <C-z> :!echo "Can't suspend GVIM"<CR>
   vnoremap <C-z> :!echo "Can't suspend GVIM"<CR>
   " windows style paste
   inoremap <S-insert> <C-o>"+gP<CR>
   nnoremap <S-insert> "+gP<CR>
   cnoremap <S-insert> <MiddleMouse>

   " set geometry
   if exists("+lines")
      set lines=150
   endif
   if exists("+columns")
      set columns=150
   endif
else
   if &term == "xterm" || &term == "xterm-color" || &term == "xterm-256color"
      if &term == "xterm-256color"
         set t_Co=256
      end
      colorscheme ferraro
   end
end

" restore last edit line position
if has("autocmd")
   au BufReadPost * if line("'\"") > 1 && line("'\"") < line("$") | exe "normal! g'\"" | endif
endif

" hilight ant text after column 80
" " set cc=80
" """""hilight overLength ctermbg=red ctermfg=white guibg=#592929
" """""match overLength /\%81v.\+/

